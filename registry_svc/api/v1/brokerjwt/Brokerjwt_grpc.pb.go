// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: api/v1/brokerjwt/Brokerjwt.proto

package brokerjwt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JwtokenManagementClient is the client API for JwtokenManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JwtokenManagementClient interface {
	IsJwtokenOK(ctx context.Context, in *Jwtoken, opts ...grpc.CallOption) (*IsJwtokenOKResponse, error)
}

type jwtokenManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewJwtokenManagementClient(cc grpc.ClientConnInterface) JwtokenManagementClient {
	return &jwtokenManagementClient{cc}
}

func (c *jwtokenManagementClient) IsJwtokenOK(ctx context.Context, in *Jwtoken, opts ...grpc.CallOption) (*IsJwtokenOKResponse, error) {
	out := new(IsJwtokenOKResponse)
	err := c.cc.Invoke(ctx, "/v1_brokerjwt.JwtokenManagement/IsJwtokenOK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JwtokenManagementServer is the server API for JwtokenManagement service.
// All implementations must embed UnimplementedJwtokenManagementServer
// for forward compatibility
type JwtokenManagementServer interface {
	IsJwtokenOK(context.Context, *Jwtoken) (*IsJwtokenOKResponse, error)
	mustEmbedUnimplementedJwtokenManagementServer()
}

// UnimplementedJwtokenManagementServer must be embedded to have forward compatible implementations.
type UnimplementedJwtokenManagementServer struct {
}

func (UnimplementedJwtokenManagementServer) IsJwtokenOK(context.Context, *Jwtoken) (*IsJwtokenOKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsJwtokenOK not implemented")
}
func (UnimplementedJwtokenManagementServer) mustEmbedUnimplementedJwtokenManagementServer() {}

// UnsafeJwtokenManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JwtokenManagementServer will
// result in compilation errors.
type UnsafeJwtokenManagementServer interface {
	mustEmbedUnimplementedJwtokenManagementServer()
}

func RegisterJwtokenManagementServer(s grpc.ServiceRegistrar, srv JwtokenManagementServer) {
	s.RegisterService(&JwtokenManagement_ServiceDesc, srv)
}

func _JwtokenManagement_IsJwtokenOK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jwtoken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtokenManagementServer).IsJwtokenOK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1_brokerjwt.JwtokenManagement/IsJwtokenOK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtokenManagementServer).IsJwtokenOK(ctx, req.(*Jwtoken))
	}
	return interceptor(ctx, in, info, handler)
}

// JwtokenManagement_ServiceDesc is the grpc.ServiceDesc for JwtokenManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JwtokenManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1_brokerjwt.JwtokenManagement",
	HandlerType: (*JwtokenManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsJwtokenOK",
			Handler:    _JwtokenManagement_IsJwtokenOK_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/brokerjwt/Brokerjwt.proto",
}
